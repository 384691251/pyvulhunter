#!env python
#coding=utf-8
# 
# Author:       liaoxinxi@nsfocus.com
# 
# Created Time: Fri 21 Nov 2014 10:49:03 AM GMT-8
# 
# FileName:     judge_injection.py
# 
# Description:  
# 
# ChangeLog:

import dump_python
import logging
import color_log
import json

logger = color_log.init_log(logging.DEBUG)
#logger = color_log.init_log(logging.INFO)
logger = color_log.init_log(logging.ERROR)
leafs = []


class judge_injection(object):
    """根据语法树自动判断注入攻击"""
    def __init__(self, filename):
        self.tree = dump_python.parse_json(filename)
        self.tree = json.loads(self.tree)
        print type(self.tree)
        self.filename = self.tree.get("filename")
        self.start = self.tree.get("start")
        self.body = self.tree.get("body")
        self.funcs = []
        self.func_lines = {}#获取一个函数的执行代码 
        logger.debug("filename:%s" %(self.filename))

    def get_risk_func(self):
        """用于输入系统危险函数"""
        funcs = ["os.system", "os.popen", "subprocess.call", "subprocess.Popen",\
                    "commands.getoutput", "commands.getstatusoutput"]
        funcs = ["system", "popen", "call", "Popen", "getoutput", "getstatusoutput", "eval"]
        return funcs

    def get_func_objects(self):
        """获取语法树中的函数结构们"""
        for obj in self.body:#代码行
            if obj.get("type") == "FunctionDef":
                self.funcs.append(obj)
                logger.debug("func:%r" %(obj))

        return 

    def get_func_lines(self, func, func_name):
        """获取函数的执行的行"""
        #if "body" in func:
        if isinstance(func, dict):
            lines = func.get('body')
        elif isinstance(func, list):
            lines = func

        for line in lines:
            ast_body = line.get('body')
            ast_orelse = line.get('orelse')
            ast_handlers = line.get('handlers')
            if "value" in line and "func" in line.get("value"):
                self.func_lines[func_name].append(line)
                continue
            if ast_body:
                self.get_func_lines(ast_body, func_name)
            if ast_orelse:
                self.get_func_lines(ast_orelse, func_name)
            if ast_handlers:
                self.get_func_lines(ast_handlers, func_name)
        #else:
        #    #if not ast_body and not ast_orelse and not ast_handlers:
        #    logger.debug("get_func_lines:%r" %(func))
        #    self.func_lines[func_name].extend(func)
            
        return

    def parse_func(self, func):
        global leafs
        func_name = func.get("name")
        logger.debug("function_name:%s" %(func_name))
        args = [arg.get("id") for arg in func.get('args').get("args")] #arg.id
        logger.debug("args:%s" %str(args))
        kwarg = func.get('args').get('kwarg')
        self.func_lines.setdefault(func_name, [])
        self.get_func_lines(func, func_name)
        lines = self.func_lines[func_name]
        logger.debug("func_lines:%r" %(lines))

        for line in lines:
        #    logger.debug("line:%r" %(line))
            leafs = []
            value = line.get("value")
            lineno = line.get("lineno")
            logger.debug("line:%d" %(lineno))
            if lineno >= 63 and lineno <= 65:
                logger.debug("line:%r" %(line))
            if value and value.get("type") == "Call":
                logger.info("value:%r" %(value))
                line_func = value.get("func")
                if line_func.get("attr") in self.get_risk_func():
                    if value.get("args"):
                        for arg in value.get("args"):
                            if not arg.get("_fields"):
                                if arg.get("id") in args:
                                    logger.error("maybe injected File:%s,function:%s,line:%s" %(self.filename, func_name, lineno ))
                            else:
                                find_arg_leafs(arg)
                                for leaf in leafs:
                                    if leaf in args:
                                        logger.error("maybe injected File:%s,function:%s,line:%s" %(self.filename, func_name, lineno ))



    def parse_py(self):
        logger.debug("parse_py")
        self.get_func_objects()
        
        for func in self.funcs:
            #logger.debug("func:%r" %(func))
            self.parse_func(func)


def find_all_leafs(args):
    global leafs
    for arg in args:
        find_arg_leafs(arg)

def find_arg_leafs(arg):
    """通过递归找到全所有子节点"""
    global leafs
    fields = arg.get("_fields")
    if not fields:
        return 
    if "right" in fields:
        right_id = arg.get("right").get("id")
        if right_id:
            leafs.append(right_id)
    if "left" in fields and not arg.get("left").get("_fields"):
        left_id = arg.get('left').get('id')
        if left_id:
            leafs.append(left_id)
    if "left" in fields and arg.get("left").get("_fields"):
        find_arg_leafs(arg.get("left"))

    


if __name__ == "__main__":
    filename = "libssh2_login_test.py"
#    filename = "/home/liaoxinxi/trunk/src/www/npai/systemforpa.py"
    judge = judge_injection(filename)
    judge.parse_py()
    


        

